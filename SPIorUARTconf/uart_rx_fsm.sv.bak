// uart_rx_fsm.sv
module uart_rx_fsm #(
    parameter int CLKS_PER_BIT = 5208
)(
    input  logic       i_Clock,
    input  logic       i_Enable,
    input  logic       r_Rx_Data,
    input  logic [15:0] r_Clock_Count,
    input  logic [2:0] r_Bit_Index,
    output logic [2:0] o_SM_Main
);
    
    typedef enum logic [2:0] {
        s_IDLE = 3'b000, 
        s_RX_START_BIT = 3'b001, 
        s_RX_DATA_BITS = 3'b010, 
        s_RX_STOP_BIT  = 3'b011, 
        s_CLEANUP      = 3'b100
    } state_t;
    
    state_t r_SM_Main_reg;
    
    always_ff @(posedge i_Clock) begin
        if (!i_Enable) begin
            r_SM_Main_reg <= s_IDLE;
        end
        else begin
            case (r_SM_Main_reg)
                s_IDLE: begin
                    if (r_Rx_Data == 1'b0)
                        r_SM_Main_reg <= s_RX_START_BIT;
                    else
                        r_SM_Main_reg <= s_IDLE;
                end
                
                s_RX_START_BIT: begin
                    if (r_Clock_Count == (CLKS_PER_BIT-1)/2) begin
                        if (r_Rx_Data == 1'b0)
                            r_SM_Main_reg <= s_RX_DATA_BITS;
                        else
                            r_SM_Main_reg <= s_IDLE;
                    end
                    else
                        r_SM_Main_reg <= s_RX_START_BIT;
                end
                
                s_RX_DATA_BITS: begin
                    if (r_Clock_Count == CLKS_PER_BIT-1) begin
                        if (r_Bit_Index < 3'd7)
                            r_SM_Main_reg <= s_RX_DATA_BITS;
                        else
                            r_SM_Main_reg <= s_RX_STOP_BIT;
                    end
                    else
                        r_SM_Main_reg <= s_RX_DATA_BITS;
                end
                
                s_RX_STOP_BIT: begin
                    if (r_Clock_Count == CLKS_PER_BIT-1) begin
                        r_SM_Main_reg <= s_CLEANUP;
                    end
                    else
                        r_SM_Main_reg <= s_RX_STOP_BIT;
                end
                
                s_CLEANUP: begin
                    r_SM_Main_reg <= s_IDLE;
                end
                
                default: r_SM_Main_reg <= s_IDLE;
            endcase
        end
    end
    
    assign o_SM_Main = r_SM_Main_reg;
    
endmodule