module BCD_to_7Segment(
    input logic [4:0] bcd,        // 4 bits BCD input
    output logic [6:0] seg        // Output
);

    always_comb begin
        case (bcd)
            5'b00000: seg = 7'b1000000; // 0
            5'b00001: seg = 7'b1111001; // 1
            5'b00010: seg = 7'b0100100; // 2
            5'b00011: seg = 7'b0110000; // 3
            5'b00100: seg = 7'b0011001; // 4
            5'b0101: seg = 7'b0010010; // 5
            5'b00110: seg = 7'b0000010; // 6
            5'b00111: seg = 7'b1111000; // 7
            5'b01000: seg = 7'b0000000; // 8
            5'b01001: seg = 7'b0010000; // 9
				5'b01010: seg = 7'b0001000; // A
            5'b01011: seg = 7'b0000011; // B
            5'b01100: seg = 7'b1000110; // C
            5'b01101: seg = 7'b0100001; // D
            5'b01110: seg = 7'b0000110; // E
            5'b01111: seg = 7'b0001110; // F
            default: seg = 7'b1111111; // Default 
        endcase
    end
endmodule