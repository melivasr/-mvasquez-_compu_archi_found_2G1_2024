module uart_rx_state_machine #(
  parameter int CLKS_PER_BIT = 5208
)(
  input  logic       i_Clock,
  input  logic       i_Enable,
  input  logic       r_Rx_Data,
  input  logic [2:0] r_SM_Main,
  input  logic [15:0] r_Clock_Count,
  input  logic [2:0]  r_Bit_Index,
  input  logic [7:0]  r_Rx_Byte,
  output logic [2:0]  next_r_SM_Main,
  output logic [15:0] next_r_Clock_Count,
  output logic [2:0]  next_r_Bit_Index,
  output logic [7:0]  next_r_Rx_Byte,
  output logic        o_Rx_DV
);

  // Define states
  typedef enum logic [2:0] {
    s_IDLE = 3'b000, 
    s_RX_START_BIT = 3'b001, 
    s_RX_DATA_BITS = 3'b010, 
    s_RX_STOP_BIT  = 3'b011, 
    s_CLEANUP      = 3'b100
  } state_t;

  // Implement state machine logic
  always_comb begin
    // Default assignments
    next_r_SM_Main     = r_SM_Main;
    next_r_Clock_Count = r_Clock_Count;
    next_r_Bit_Index   = r_Bit_Index;
    next_r_Rx_Byte     = r_Rx_Byte;
    o_Rx_DV            = 1'b0;

    case (r_SM_Main)
      s_IDLE: begin
        next_r_Clock_Count = 16'd0;
        next_r_Bit_Index = 3'd0;
        next_r_Rx_Byte = 8'd0;
        if (r_Rx_Data == 1'b0) begin
          next_r_SM_Main = s_RX_START_BIT;
        end
      end
      s_RX_START_BIT: begin
        if (r_Clock_Count == (CLKS_PER_BIT-1)/2) begin
          if (r_Rx_Data == 1'b0) begin
            next_r_Clock_Count = 16'd0;
            next_r_SM_Main = s_RX_DATA_BITS;
          end else begin
            next_r_SM_Main = s_IDLE;
          end
        end else begin
          next_r_Clock_Count = r_Clock_Count + 16'd1;
        end
      end
      s_RX_DATA_BITS: begin
        if (r_Clock_Count == CLKS_PER_BIT-1) begin
          next_r_Clock_Count = 16'd0;
          next_r_Rx_Byte[r_Bit_Index] = r_Rx_Data;
          if (r_Bit_Index == 3'd7) begin
            next_r_Bit_Index = 3'd0;
            next_r_SM_Main = s_RX_STOP_BIT;
          end else begin
            next_r_Bit_Index = r_Bit_Index + 3'd1;
          end
        end else begin
          next_r_Clock_Count = r_Clock_Count + 16'd1;
        end
      end
      s_RX_STOP_BIT: begin
        if (r_Clock_Count == CLKS_PER_BIT-1) begin
          if (r_Rx_Data == 1'b1) begin
            o_Rx_DV = 1'b1;
          end
          next_r_SM_Main = s_CLEANUP;
          next_r_Clock_Count = 16'd0;
        end else begin
          next_r_Clock_Count = r_Clock_Count + 16'd1;
        end
      end
      s_CLEANUP: begin
        next_r_SM_Main = s_IDLE;
        o_Rx_DV = 1'b0;
      end
      default: begin
        next_r_SM_Main = s_IDLE;
      end
    endcase
  end
endmodule