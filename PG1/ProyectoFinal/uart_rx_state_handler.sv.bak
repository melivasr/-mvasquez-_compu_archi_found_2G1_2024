module uart_rx_state_handler(
  input  logic [2:0] r_SM_Main,
  input  logic r_Rx_Data,
  input  logic [15:0] r_Clock_Count,
  input  logic [2:0] r_Bit_Index,
  input  int CLKS_PER_BIT,
  output logic [2:0] next_state
);
  typedef enum logic [2:0] {
    s_IDLE = 3'b000, 
    s_RX_START_BIT = 3'b001, 
    s_RX_DATA_BITS = 3'b010, 
    s_RX_STOP_BIT  = 3'b011, 
    s_CLEANUP      = 3'b100
  } state_t;

  always_comb begin
    case (r_SM_Main)
      s_IDLE: next_state = (r_Rx_Data == 1'b0) ? s_RX_START_BIT : s_IDLE;
      s_RX_START_BIT: next_state = (r_Clock_Count == (CLKS_PER_BIT-1)/2 && r_Rx_Data == 1'b0) ? s_RX_DATA_BITS : (r_Clock_Count == (CLKS_PER_BIT-1)/2) ? s_IDLE : s_RX_START_BIT;
      s_RX_DATA_BITS: next_state = (r_Clock_Count == CLKS_PER_BIT-1 && r_Bit_Index == 3'd7) ? s_RX_STOP_BIT : s_RX_DATA_BITS;
      s_RX_STOP_BIT: next_state = (r_Clock_Count == CLKS_PER_BIT-1) ? s_CLEANUP : s_RX_STOP_BIT;
      s_CLEANUP: next_state = s_IDLE;
      default: next_state = s_IDLE;
    endcase
  end
endmodule